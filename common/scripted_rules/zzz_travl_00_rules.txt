# Determines who can command troops; will still show up in the list, with a breakdown explaining why they can't command
# Root is the potential commander
# scope:army_owner is who owns the army to command
can_command_troops_now = {
	can_be_commander_now_trigger = { ARMY_OWNER = scope:army_owner }

	#AGOT Added, if knight in an army it should be owned by the same owner
	trigger_if = {
		limit = { exists = knight_army }
		knight_army.army_owner = scope:army_owner
	}
}

# Determines if a character may be appointed as a knight. Checked during automatic knight assignment
# Root is the potential knight
can_be_knight = {
	#AGOT Modified, capture army owner and allow player knights
	#trigger_if = {
	#	limit = {
	#		OR = {
	#			is_landed = no
	#			root = root.court_owner 
	#		}
	#		NOT = { exists = liege } 
	#	}
	#	can_be_knight_trigger = { ARMY_OWNER = root.court_owner }
	#}
	# trigger_else = {
	# 	can_be_knight_trigger = { ARMY_OWNER = liege }
	# }
	trigger_if = {
		limit = {
			OR = {
				is_playable_character = no
				root = root.court_owner
			}
			NOT = { exists = liege }
		}
		root.court_owner = { save_temporary_scope_as = army_owner }
	}
	trigger_else = {
		liege = { save_temporary_scope_as = army_owner }
	}
	trigger_if = {
		limit = {
			OR = {
				is_ai = yes
				NOT = { exists = liege }
			}
		}
		can_be_knight_trigger = { ARMY_OWNER = scope:army_owner }
	}
	trigger_else = {
		OR = {
			is_adult = yes
			AND = {
				age >= 14
				is_current_dragonrider_warfare = yes
			}
		}
		is_clergy = no
		is_alive = yes
		is_imprisoned = no
		NOT = { has_trait = incapable }
		NOT = { has_trait = blind }
		NOT = { has_trait = devoted }
		NOT = { has_character_flag = cannot_be_knight_and_commander }
	}

	#AGOT Added
	NOT = { has_character_flag = agot_is_at_unknown_place }

	#AGOT Added, if commanding an army it should be owned by the same owner
	trigger_if = {
		limit = { exists = commanding_army }
		commanding_army.army_owner = scope:army_owner
	}
}
